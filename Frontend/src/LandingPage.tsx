import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Card, Typography, TextField, Button, Stack, LinearProgress } from '@mui/material';
import AnimatedBackground from './AnimatedBackground';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

const LandingPage = () => {
  const [prompt, setPrompt] = useState('');
  const [streamingOutput, setStreamingOutput] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setStreamingOutput('');
    if (!prompt.trim()) return;
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/template`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });
      const data = await response.json();
      setLoading(false);
      if (!response.ok) {
        setError(data.error || 'Failed to generate website');
        return;
      }
      if (data.files) {
        const workspaceId = Date.now().toString();
        // Save files to localStorage with workspaceId as key
        localStorage.setItem(`workspace_files_${workspaceId}`, JSON.stringify(data.files));
        navigate(`/workspace/${workspaceId}`, { state: { files: data.files, prompt } });
      } else {
        setError('No files generated by backend');
      }
    } catch (err: any) {
      setLoading(false);
      setError(err?.message || 'Failed to connect to backend');
    }
  };

  return (
    <Box sx={{ minHeight: '100vh', width: '100vw', position: 'relative', overflow: 'hidden' }}>
      <AnimatedBackground />
      <Box sx={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', position: 'relative', zIndex: 1 }}>
        <Card sx={{ p: 6, borderRadius: 4, minWidth: 400, boxShadow: 8, display: 'flex', flexDirection: 'column', alignItems: 'center', bgcolor: 'background.paper', backdropFilter: 'blur(2px)', width: 480 }}>
          <Typography variant="h3" fontWeight={700} mb={2} color="primary.main">
            IFrameIt
          </Typography>
          <Typography variant="subtitle1" mb={4} color="text.secondary">
            Instantly create your own website with AI
          </Typography>
          <form onSubmit={handleSubmit} style={{ width: '100%' }}>
            <Stack spacing={3}>
              <TextField
                label="Describe your website..."
                value={prompt}
                onChange={e => setPrompt(e.target.value)}
                variant="outlined"
                size="medium"
                autoFocus
                fullWidth
                InputLabelProps={{ style: { color: '#b0b8c1' } }}
              />
              <Button
                type="submit"
                variant="contained"
                size="large"
                color="primary"
                fullWidth
                sx={{ fontWeight: 600, fontSize: 18, py: 1.5 }}
                disabled={!prompt.trim() || loading}
              >
                {loading ? 'Generating...' : 'Create Website'}
              </Button>
            </Stack>
          </form>
          {/* Loading and error display */}
          {(loading || error) && (
            <Box sx={{ width: '100%', mt: 4 }}>
              {loading && <LinearProgress sx={{ mb: 1 }} />}
              {error && (
                <Typography color="error" sx={{ mb: 1 }}>
                  {error}
                </Typography>
              )}
            </Box>
          )}
        </Card>
      </Box>
    </Box>
  );
};

export default LandingPage;
